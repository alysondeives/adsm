/* Copyright (c) 2011 University of Illinois
                   Universitat Politecnica de Catalunya
                   All rights reserved.

Developed by: IMPACT Research Group / Grup de Sistemes Operatius
              University of Illinois / Universitat Politecnica de Catalunya
              http://impact.crhc.illinois.edu/
              http://gso.ac.upc.edu/

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to
deal with the Software without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
  1. Redistributions of source code must retain the above copyright notice,
     this list of conditions and the following disclaimers.
  2. Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimers in the
     documentation and/or other materials provided with the distribution.
  3. Neither the names of IMPACT Research Group, Grup de Sistemes Operatius,
     University of Illinois, Universitat Politecnica de Catalunya, nor the
     names of its contributors may be used to endorse or promote products
     derived from this Software without specific prior written permission.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
WITH THE SOFTWARE.  */


#ifndef __cplusplus
#error "This header can only be included in C++ programs"
#endif

#ifndef GMAC_OPENCL_CPP_H_
#define GMAC_OPENCL_CPP_H_

#include <string>
#include <istream>

#include "opencl.h"

namespace ocl {

typedef ocl_error error;

typedef ocl_memory_hint memory_hint;
typedef ocl_protection protection;

class kernel {
private:
    /** "C" kernel handler used by the object */
    ocl_kernel kernel_;

    /** Helper class used to detect pointer parameters for setArg */
    template <typename T>
    struct Param {
        T value_;
        Param(T init) :
            value_(init)
        {
        }
    };

    /** Helper class used to detect pointer parameters for setArg */
    template <typename T>
    struct Param<T *> {
        cl_mem value_;
        Param(T *init) :
            value_(oclPtr(init))
        {
        }
    };

    /**
     * Gets a "C" kernel handler for the specified kernel
     *
     * \param name Name of the kernel
     *
     * \return oclSuccess on success, an error code otherwise
     */
    error getByName(std::string name);

public:
    /**
     * Creates an returns a pointer to a C++ kernel handler for the specified kernel
     *
     * \param name Name of the kernel
     *
     * \return A pointer C++ kernel handler on success, NULL otherwise
     */
    static
    kernel *get(std::string name);

    /**
     * Constructs C++ kernel handler for the specified kernel
     *
     * \param name Name of the kernel
     * \param err A reference to set the return value. oclSuccess on success, an error code otherwise
     */
    kernel(std::string name, error &err);

    /** Releases the resources used by the C++ kernel handler */
    ~kernel();

    /**
     * Assigns a C++ kernel handler to the object
     *
     * \param launch Constant reference to the C++ handler to be assigned
     *
     * \return A reference to the current C++ descriptor
     */
    ocl::kernel &operator=(const kernel &handler);

    /**
     * Sets an argument to be used by the following call to callNDRange()
     *
     * \param index Index of the parameter being set in the parameter list
     * \param size Size, in bytes, of the argument
     * \param addr Memory address where the argument is stored
     *
     * \return Error code
     */
    error setArg(unsigned index, size_t size, const void *addr);

    /**
     * Sets an argument to be used by the following call to callNDRange()
     *
     * \param index Index of the parameter being set in the parameter list
     * \param val Value to be set
     *
     * \return Error code
     */
    template <typename T>
    error setArg(unsigned index, T val);

    /**
     * Launches a kernel execution
     *
     * \param workDim Number of dimensions of the work
     * \param globalWorkOffset Array of workDim elements that represent the work offset for the
     * kernel execution, or NULL
     * \param globalWorkSize Array of workDim elements that represent the global number of
     * work-items for the kernel execution
     * \param localWorkSize Array of workDim elements that represent the number of work-items
     * per work-group for the kernel execution
     *
     * \return oclSuccess if success, an error code otherwise
     */
    error callNDRange(size_t workDim, size_t *globalWorkOffset,
                      size_t *globalWorkSize, size_t *localWorkSize);

#ifdef __GXX_EXPERIMENTAL_CXX0X__
private:
    template <typename P1, typename ...Pn>
    error __launch(size_t workDim, size_t *globalWorkOffset,
                   size_t *globalWorkSize, size_t *localWorkSize, 
                   unsigned index, P1 p1, Pn ...pn);

    error __launch(size_t workDim, size_t *globalWorkOffset,
                   size_t *globalWorkSize, size_t *localWorkSize, unsigned index);

public:
    template <typename P1, typename ...Pn>
    error callNDRange(size_t workDim, size_t *globalWorkOffset,
                      size_t *globalWorkSize, size_t *localWorkSize,
                      P1 p1, Pn ...pn);
#endif
};

/*
 * BEGIN CLASS IMPLEMENTATION
 */

inline
error kernel::getByName(std::string name)
{
    error ret = ::oclKernelGet(name.c_str(), &kernel_);
    return ret;
}

inline
kernel *kernel::get(std::string name)
{
    error err;
    kernel *launch = new kernel(name, err);
    if (err == oclSuccess) return launch;
    delete launch;
}

inline
kernel::kernel(std::string name, error &err)
{
    err = oclSuccess;
    if (getByName(name) != oclSuccess) err = oclErrorInvalidKernelName;
}

inline
kernel::~kernel()
{
    oclKernelRelease(kernel_);
}

inline
kernel &kernel::operator=(const kernel &handler)
{
    kernel_ = handler.kernel_;
    return *this;
}

inline
error kernel::setArg(unsigned index, size_t size, const void *addr)
{
    return ::oclSetKernelArg(kernel_, index, size, addr);
}

template <typename T>
inline
error kernel::setArg(unsigned index, T val)
{
    Param<T> p(val);
    return ::oclSetKernelArg(kernel_, index, sizeof(p.value_), &p.value_);
}

inline
error kernel::callNDRange(size_t workDim, size_t *globalWorkOffset,
                          size_t *globalWorkSize, size_t *localWorkSize)
{
    error ret = ::oclCallNDRange(kernel_, workDim, globalWorkOffset, globalWorkSize, localWorkSize);
    return ret;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
template <typename P1, typename ...Pn>
error kernel::__launch(size_t workDim, size_t *globalWorkOffset,
                       size_t *globalWorkSize, size_t *localWorkSize, 
                       unsigned index, P1 p1, Pn ...pn)
{
    error ret = setArg(index, p1);
    if (ret != gmacSuccess) return ret;
    return __launch(workDim, globalWorkOffset, globalWorkSize, localWorkSize, index + 1, pn...);
}

error kernel::__launch(size_t workDim, size_t *globalWorkOffset,
                       size_t *globalWorkSize, size_t *localWorkSize, unsigned index)
{
    return ::oclKernelLaunch(kernel_, workDim, globalWorkOffset, globalWorkSize, localWorkSize);
}

template <typename P1, typename ...Pn>
error kernel:callNDRange(size_t workDim, size_t *globalWorkOffset,
                         size_t *globalWorkSize, size_t *localWorkSize,
                         P1 p1, Pn ...pn)
{
    return __launch(workDim, globalWorkOffset, globalWorkSize, localWorkSize, 0, p1, pn...);
}
#endif

/*
 * END CLASS IMPLEMENTATION
 */

/**
 * Prepares the OpenCL code to be used by the applications 
 *
 * \param code Pointer to the NULL-terminated string that contains the code
 * \param flags Compilation flags or empty string
 *
 * \return oclSuccess if success, an error code otherwise
 */
static inline error compileSource(std::string code, std::string flags = "")
{
    return ::oclCompileSource(code.c_str(), flags.c_str());
}

/**
 * Prepares the OpenCL code to be used by the applications 
 *
 * \param path String with the path of the file that contains the code
 * \param flags Compilation flags or empty string
 *
 * \return oclSuccess if success, an error code otherwise
 */
static inline error compileSourceFile(std::string path, std::string flags = "")
{
    return ::oclCompileSourceFile(path.c_str(), flags.c_str());
}

/**
 * Prepares the OpenCL code to be used by the applications 
 *
 * \param in Input stream that reads the code
 * \param flags Compilation flags or empty string
 *
 * \return oclSuccess if success, an error code otherwise
 */
static inline error compileSourceStream(std::istream &in, std::string flags = "")
{
    if (!in.good()) return gmacErrorInvalidValue;
    in.seekg (0, std::ios::end);
    std::streampos length = in.tellg();
    in.seekg (0, std::ios::beg);
    if (length == std::streampos(0)) return gmacSuccess;
    // Allocate memory for the code
    char *buffer = new char[int(length)+1];
    // Read data as a block
    in.read(buffer,length);
    buffer[length] = '\0';
    error ret = ::oclCompileSource(buffer, flags.c_str());
    delete [] buffer;
    return ret;
}

/**
 * Prepares the OpenCL binary to be used by the applications 
 *
 * \param binary Pointer to the array that contains the binary code
 * \param size Size in bytes of the array that contains the binary code
 * \param flags Compilation flags or empty string
 *
 * \return oclSuccess if success, an error code otherwise
 */
static inline error compileBinary(const unsigned char *binary, size_t size, std::string flags = "")
{
    return ::oclCompileBinary(binary, size, flags.c_str());
}

/**
 * Prepares the OpenCL binary code to be used by the applications 
 *
 * \param path String with the path of the file that contains the binary code
 * \param flags Compilation flags or empty string
 *
 * \return oclSuccess if success, an error code otherwise
 */
static inline error compileBinaryFile(std::string path, std::string flags = "")
{
    return ::oclCompileBinaryFile(path.c_str(), flags.c_str());
}

/**
 * Prepares the OpenCL code to be used by the applications 
 *
 * \param in Input stream that reads the code
 * \param flags Compilation flags or empty string
 *
 * \return oclSuccess if success, an error code otherwise
 */
static inline error compileBinaryStream(std::istream &in, std::string flags = "")
{
    if (!in.good()) return gmacErrorInvalidValue;
    in.seekg (0, std::ios::end);
    std::streampos length = in.tellg();
    in.seekg (0, std::ios::beg);
    if (length == std::streampos(0)) return gmacSuccess;
    // Allocate memory for the code
    unsigned char *buffer = new unsigned char[int(length)+1];
    // Read data as a block
    in.read((char *) buffer,length);
    buffer[length] = '\0';
    error ret = ::oclCompileBinary(buffer, length, flags.c_str());
    delete [] buffer;
    return ret;
}

static inline
unsigned getNumberOfAccelerators()
{
    return ::oclGetNumberOfAccelerators();
}

static inline
size_t getFreeMemory()
{
    return ::oclGetFreeMemory();
}

static inline
error migrate(unsigned acc)
{
    return ::oclMigrate(acc);
}

static inline
ocl_error memoryMap(void *cpuPtr, size_t count, protection prot)
{
    return ::oclMemoryMap(cpuPtr, count, prot);
}

static inline
ocl_error memoryUnmap(void *cpuPtr, size_t count)
{
    return ::oclMemoryUnmap(cpuPtr, count);
}

static inline
ocl_error malloc(void **devPtr, size_t count)
{
    return ::oclMalloc(devPtr, count);
}

static inline
ocl_error globalMalloc(void **devPtr, size_t count, memory_hint hint = OCL_GLOBAL_MALLOC_CENTRALIZED)
{
    return ::oclGlobalMalloc(devPtr, count, hint);
}

static inline
ocl_error free(void *cpuPtr)
{
    return ::oclFree(cpuPtr);
}

static inline
error getLastError()
{
    return ::oclGetLastError();
}

static inline
void *memset(void *cpuPtr, int c, size_t count)
{
    return ::oclMemset(cpuPtr, c, count);
}

static inline
void *memcpy(void *cpuDstPtr, const void *cpuSrcPtr, size_t count)
{
    return ::oclMemcpy(cpuDstPtr, cpuSrcPtr, count);
}

static inline
void deviceSend(THREAD_T tid)
{
    ::oclDeviceSend(tid);
}

static inline
void deviceReceive(void)
{
    ::oclDeviceReceive();
}

static inline
void deviceSendReceive(THREAD_T tid)
{
    ::oclDeviceSendReceive(tid);
}

static inline
void deviceCopy(THREAD_T tid)
{
    ::oclDeviceCopy(tid);
}

template<typename T>
static inline
cl_mem ptr(const T *addr)
{
    return ::oclPtr((const void *)addr);
}

#ifdef __cplusplus
}
#endif


#undef __dv

#endif /* OPENCL_H */

/* vim:set ft=cpp backspace=2 tabstop=4 shiftwidth=4 textwidth=120 foldmethod=marker expandtab: */
